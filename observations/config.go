package observations

import (
	"encoding/json"
	"strconv"
	"time"

	"github.com/kelseyhightower/envconfig"

	"github.com/ipfs/ipfs-cluster/config"
)

const metricsConfigKey = "metrics"
const tracingConfigKey = "tracing"
const envConfigKey = "cluster_observations"

// Default values for this Config.
const (
	DefaultEnableStats            = false
	DefaultPrometheusEndpoint     = ":8888"
	DefaultStatsReportingInterval = 2 * time.Second

	DefaultEnableTracing           = false
	DefaultJaegerAgentEndpoint     = "0.0.0.0:6831"
	DefaultJaegerCollectorEndpoint = "http://0.0.0.0:14268"
	DefaultTracingSamplingProb     = 0.3
	DefaultTracingServiceName      = "cluster-daemon"
)

// MetricsConfig configures metrics collection.
type MetricsConfig struct {
	config.Saver

	EnableStats            bool
	PrometheusEndpoint     string
	StatsReportingInterval time.Duration
}

type jsonMetricsConfig struct {
	EnableStats            string `json:"enable_stats"`
	PrometheusEndpoint     string `json:"prometheus_endpoint"`
	StatsReportingInterval string `json:"metrics_reporting_interval"`
}

// ConfigKey provides a human-friendly identifier for this type of Config.
func (cfg *MetricsConfig) ConfigKey() string {
	return metricsConfigKey
}

// Default sets the fields of this Config to sensible values.
func (cfg *MetricsConfig) Default() error {
	cfg.EnableStats = DefaultEnableStats
	cfg.PrometheusEndpoint = DefaultPrometheusEndpoint
	cfg.StatsReportingInterval = DefaultStatsReportingInterval

	return nil
}

// Validate checks that the fields of this Config have working values,
// at least in appearance.
func (cfg *MetricsConfig) Validate() error {
	//TODO(lanzafame)
	return nil
}

// LoadJSON sets the fields of this Config to the values defined by the JSON
// representation of it, as generated by ToJSON.
func (cfg *MetricsConfig) LoadJSON(raw []byte) error {
	jcfg := &jsonMetricsConfig{}
	err := json.Unmarshal(raw, jcfg)
	if err != nil {
		logger.Error("Error unmarshaling observations config")
		return err
	}

	cfg.Default()

	// override json config with env var
	err = envconfig.Process(envConfigKey, jcfg)
	if err != nil {
		return err
	}

	err = cfg.loadMetricsOptions(jcfg)
	if err != nil {
		return err
	}

	return cfg.Validate()
}

func (cfg *MetricsConfig) loadMetricsOptions(jcfg *jsonMetricsConfig) error {
	var err error
	cfg.EnableStats, err = strconv.ParseBool(jcfg.EnableStats)
	if err != nil {
		return err
	}
	cfg.PrometheusEndpoint = jcfg.PrometheusEndpoint

	return config.ParseDurations(
		metricsConfigKey,
		&config.DurationOpt{
			Duration: jcfg.StatsReportingInterval,
			Dst:      &cfg.StatsReportingInterval,
			Name:     "metrics_reporting_interval",
		},
	)
}

// ToJSON generates a human-friendly JSON representation of this Config.
func (cfg *MetricsConfig) ToJSON() ([]byte, error) {
	jcfg := &jsonMetricsConfig{
		EnableStats:            strconv.FormatBool(cfg.EnableStats),
		PrometheusEndpoint:     cfg.PrometheusEndpoint,
		StatsReportingInterval: cfg.StatsReportingInterval.String(),
	}

	return config.DefaultJSONMarshal(jcfg)
}

// TracingConfig configures tracing.
type TracingConfig struct {
	config.Saver

	EnableTracing           bool
	JaegerAgentEndpoint     string
	JaegerCollectorEndpoint string
	TracingSamplingProb     float64
	TracingServiceName      string
}

type jsonTracingConfig struct {
	EnableTracing           string  `json:"enable_tracing"`
	JaegerAgentEndpoint     string  `json:"jaeger_agent_endpoint"`
	JaegerCollectorEndpoint string  `json:"jaeger_collector_endpoint"`
	TracingSamplingProb     float64 `json:"tracing_sampling_prob"`
	TracingServiceName      string  `json:"tracing_service_name"`
}

// ConfigKey provides a human-friendly identifier for this type of Config.
func (cfg *TracingConfig) ConfigKey() string {
	return tracingConfigKey
}

// Default sets the fields of this Config to sensible values.
func (cfg *TracingConfig) Default() error {
	cfg.EnableTracing = DefaultEnableTracing
	cfg.JaegerAgentEndpoint = DefaultJaegerAgentEndpoint
	cfg.JaegerCollectorEndpoint = DefaultJaegerCollectorEndpoint
	cfg.TracingSamplingProb = DefaultTracingSamplingProb
	cfg.TracingServiceName = DefaultTracingServiceName
	return nil
}

// Validate checks that the fields of this Config have working values,
// at least in appearance.
func (cfg *TracingConfig) Validate() error {
	//TODO(lanzafame)
	return nil
}

// LoadJSON sets the fields of this Config to the values defined by the JSON
// representation of it, as generated by ToJSON.
func (cfg *TracingConfig) LoadJSON(raw []byte) error {
	jcfg := &jsonTracingConfig{}
	err := json.Unmarshal(raw, jcfg)
	if err != nil {
		logger.Error("Error unmarshaling observations config")
		return err
	}

	cfg.Default()

	// override json config with env var
	err = envconfig.Process(envConfigKey, jcfg)
	if err != nil {
		return err
	}

	err = cfg.loadTracingOptions(jcfg)
	if err != nil {
		return err
	}

	return cfg.Validate()
}

func (cfg *TracingConfig) loadTracingOptions(jcfg *jsonTracingConfig) error {
	var err error
	cfg.EnableTracing, err = strconv.ParseBool(jcfg.EnableTracing)
	if err != nil {
		return err
	}
	cfg.JaegerAgentEndpoint = jcfg.JaegerAgentEndpoint
	cfg.JaegerCollectorEndpoint = jcfg.JaegerCollectorEndpoint
	cfg.TracingSamplingProb = jcfg.TracingSamplingProb
	cfg.TracingServiceName = jcfg.TracingServiceName

	return nil
}

// ToJSON generates a human-friendly JSON representation of this Config.
func (cfg *TracingConfig) ToJSON() ([]byte, error) {
	jcfg := &jsonTracingConfig{
		EnableTracing:           strconv.FormatBool(cfg.EnableTracing),
		JaegerAgentEndpoint:     cfg.JaegerAgentEndpoint,
		JaegerCollectorEndpoint: cfg.JaegerCollectorEndpoint,
		TracingSamplingProb:     cfg.TracingSamplingProb,
		TracingServiceName:      cfg.TracingServiceName,
	}

	return config.DefaultJSONMarshal(jcfg)
}
